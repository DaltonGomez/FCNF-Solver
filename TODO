# TODO:

HIGH-PRIORITY CHANGES & BUGS:
=============================
+ Update the GA to allow for multiple possible capacities (i.e. parallel edges)
    - Cannot correctly allow for parallel edge opportunity in the reduction
+ Add method for using NetworkX to randomly generate a network and then parse that into the FCNF class



LOW PRIORITY CHANGES & QUALITY OF LIFE:
=======================================
+ Continue debugging how to get the optimal alpha values
+ Change input data (e.g. capacities, fixed costs, variable costs, etc.) to be of type float and not int



POSSIBLE CHANGES & IDEAS:
=========================
+ Modify so that the FCNF instance is of edge values only (i.e. create a super-source/sink and push all source/sink cost onto the edges from the super-source/sink)
    - Not only would this drastically change the network, node, edge, and solver classes, it would also lead to hard to interpret visualization
+ Do not worry about the single capacity per edge constraint- it is implied if the capacity vs. cost is convex



NOTES:
======

First Cross-Over Method Attempt:

    def randomTopTwoCrossover(self):
        """Crossover of the alpha-reduced chromosome at a random point"""
        # Rank population and discard bottom two individuals
        self.rankPopulation()
        self.population.pop(-1)
        self.population.pop(-1)
        # Get crossover point and direction from RNG
        random.seed()
        crossoverPoint = random.randint(0, self.FCFN.numEdges)
        crossoverDirection = random.randint(0, 2)
        # Initialize offspring
        offspringOne = AlphaIndividual(-1, self)
        offspringTwo = AlphaIndividual(-1, self)
        # Conduct crossover
        if crossoverDirection == 0:
            for i in range(crossoverPoint):
                offspringOne.alphaValues.append(self.population[0].alphaValues[i])
                offspringTwo.alphaValues.append(self.population[1].alphaValues[i])
            for j in range(crossoverPoint, self.FCFN.numEdges):
                offspringOne.alphaValues.append(self.population[0].alphaValues[j])
                offspringTwo.alphaValues.append(self.population[1].alphaValues[j])
        else:
            for i in range(crossoverPoint):
                offspringOne.alphaValues.append(self.population[1].alphaValues[i])
                offspringTwo.alphaValues.append(self.population[0].alphaValues[i])
            for j in range(crossoverPoint, self.FCFN.numEdges):
                offspringOne.alphaValues.append(self.population[1].alphaValues[j])
                offspringTwo.alphaValues.append(self.population[0].alphaValues[j])
        # Add offspring into population
        self.population.append(offspringOne)
        self.population.append(offspringTwo)
        self.solvePopulation()
        self.rankPopulation()
