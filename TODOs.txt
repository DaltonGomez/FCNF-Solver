TODOS & NOTES:

GENERAL ARCHITECTURE/REPO:
=====================================
# TODO - Continue to build out the README with documentation
# TODO - Add unit and integration tests
# TODO - Break out GA operators as interfaces via a strategy pattern
# TODO - Revise code to be less verbose/more concise & Pythonic!
# ASK - Would any major improvements in speed results from adding parallelism to solve a generation/tune over populations?
# ASK - Would anything major be gained by going to the lower level CPLEX library instead of docplex?


NETWORK GENERATION/VISUALIZATION:
=====================================
# TODO - Mess around in PyVis source code to further improve how the visualizations render
# TODO - Figure out why labels don't render on Dell/Ubuntu when making PyVis graphs
# ASK - Should a class be added to read in real-world SimCCS datasets? What would that require?
# ASK - Should the source/sink capacity ranges be modified to better fit real-world data?


ALPHA GENETIC ALGORITHM:
=====================================
# TODO - Add a strategy to log the best known individual and prevent its alpha table from ever being overwritten (thus making the population strictly convergent)
# TODO - Implement the frequency crossover operator described on PDF page 114 of the Canadian's book (if it's even possible w/ continuous genes)
# ASK - Should the topological-based operators (i.e. crossover and mutation based on selected paths/pathlets) be revisited?
# NOTE - See below for proposed pseudocode of how to compute pathlets:
    >> On a copy of the network:
        >> for node in nodes:
            >> if node.degree == 2 and node.type != src/sink:
                >> collapseEdges(node.edges)
                >> remove(node)
            >> return pathlet graph as (remaining nodes, collapsed edges, dict[collapsedEdge] = listOfOriginalEdges)


GA EXPERIMENTS:
=====================================
# TODO - Modify MILP class to build model on initialization, then clear solution values and resolve in the HP tuner (thus reducing the time wasted rebuilding the same model)
# TODO - Measure population diversity over evolution at genotypic (not just the phenotypic) level
# ASK - Does the naive hillclimb need to be nudge-mutation-based as Sheppard suggested?
# ASK - Would a random search strategy work better than grid search for hyperparameter tuning?
# ASK - What information could be gained from a sensitivity/perturbation analysis on alpha values?
# ASK - Would a brief, interrupted run of CPLEX-MILP generating initial alpha values for the population improve overall performance?
# ASK - Should other metahueristic strategies (e.g. binary GA, differential evolution, etc.) be implemented for experimentation


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ANT COLONY OPTIMIZATION ALGORITHM:
=====================================
# TODO - Determine if source/sink arcs should have special pheromone deposition and/or "goodness" of arc calculations
# TODO - Update behavior to preferentially select arcs with opposing flows as those are cost saving (in the post-processing)
# TODO - Revise the post-processing to cancel opposing flows so that it handles parallel arcs
# TODO - Adapt to account for parallel arcs (i.e. more than one possible edge capacity) and test on parallel edges
# TODO - Implement a termination criteria based on convergence, not just number of episodes/generations
# TODO - Run the ants in parallel
# TODO - Construct feasibility proof of the solution returned by an ant
# TODO - Attempt to prove the convergence of the colony's solution in the limit
# TODO - Consider adding some annealing schedules to hyperparameters to reset the amount of exploration
# TODO - Clean up ant experiments to resemble the GA experiments
# TODO - Improve the hyperparameter tuning method and increase the search space
# TODO - Analyze time constraints
# TODO - Revisit and test pheromone deposition and arc "goodness" equations
# ASK - Should "goodness" equation be, G(e) = cap(e) / (FC(e) + VC(e) * cap(e)), as this would be flow/$ if the pipeline was at capacity?


GA/ACO INTEGRATION & OTHER FUTURE IDEAS:
=====================================
# NOTE - Use the ants to determine paths/trim input graph and then use the GA to refine, potentially as an iterative process until convergence.
# NOTE - Use the dynamic nature of ACO for the optimal sink location within a feasible geologic region (i.e. polygon)
# NOTE - Use the dynamic nature of ACO for the sink capacity uncertainty


VERSIONS (AS BRANCHES):
=====================================
# NOTE - main -> The most current development of the FCNF-Solver for the Genetic Algorithm matheuristic paper
# NOTE - VERSION_3.0 -> FCNF-Solver prior to overhaul of daemon update mechanics
# NOTE - VERSION_2.0 -> FCNF-Solver prior to data structure optimizations and design pattern revisions
# NOTE - VERSION_1.0 -> An initial development of the FCNF-Solver with a drastically different architecture than the main
