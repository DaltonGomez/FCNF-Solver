NOTES & TODOS:

GENERAL/NETWORK/SOLVERS:
=====================================
# TODO - Update README with Documentation
# TODO - Add Unit Tests
# TODO - Update network visualization to include coloring for number of arcs per edge selected
# TODO - Do another large overhual, including exposing classes only through getters/settings, making attributes private, and remove/optimizing duplicate attributes
# TODO - Consider reformulating FlowNetwork as single super-source/single super-sink
>> I'm wondering if this is essential as it extends the alpha value to the sources and sinks when they are recast as edges
>> On second thought, I don't think this matters as alpha values only remedy the fixed charge problem and src/sink are only variable charged
# TODO - Add to solution visualization a way to capture relative edge costs in color (or another meaning metric)
# TODO - Figure out how to enforce the one arc per edge constraint in the alpha-relaxed LP
>> Do not worry about the single arc per edge constraint- it is implied if the capacity vs. cost function is convex
# TODO - Implement a Data-In class to read in an input network from a csv, like SimCCS data
# TODO - Revise how the network is generated (to be more clustered)
>> Clustered Generation Strategy:
    >> Place a point down and then place a bunch of sources or sinks inside a circle centered around that point (i.e. clusters)
    >> Multiply the cost through by 100,000 (?) to get away from the sub-single digits
    >> Total sink cap > total source cap
    >> Then set all node variable costs to zero
    >> Run w/ target at total source cap
# TODO - Also, use source and sink data to generate capacity distributions to sample in network generation


ALPHA GENETIC ALGORITHM APPROACH:
=====================================
# TODO - Correct pathing
>> Sean's Recommendation for Computing Pathlets:
    >> On a copy of the network:
        >> for node in nodes:
            >> if node.degree == 2 and node.type != src/sink:
                >> collapseEdges(node.edges)
                >> remove(node)
            >> return pathlet graph as (remaining nodes, collapsed edges, dict[collapsedEdge] = listOfOriginalEdges)
# TODO - Use a timed-then-interrupted run of CPLEX-MILP to generate initial alpha values for the population
# TODO - Anneal hyperparameters over time
# TODO - Try the CPLEX library instead of docplex
# TODO - Make mutations more extreme to better capture the 0/1 edge opened decision
# TODO - Implement Pandas Dataframes and MatPlotLib to visualize algorithm properties (i.e. convergences, etc.)
>> Is the range of possible alpha values at initialization/mutation significant


ALPHA GENETIC ALGORITHM EXPERIMENTS:
=====================================
# TODO - Run tuning and results experiments
# TODO - Measure population diversity at genotypic and phenotypic levels
# TODO - Do sensitivity/perturbation analysis on alpha values


ANT COLONY OPTIMIZATION APPROACH:
=====================================
# TODO - Revise ant behavior to avoid previously visited nodes altogether, rather than popping from the trip stack
>> Not actually a good idea as this will allow ants to get deadlocked at nodes surrounded by full capacity edges and previously visited nodes
# TODO - Revisit and test pheromone deposition and arc "goodness" equations
>> Should "goodness" equation be, G(e) = cap(e) / (FC(e) + VC(e) * cap(e)), as this would be flow/$ if the pipeline was at capacity.
# TODO - Determine if source/sink arcs should have special pheromone deposition and/or "goodness" of arc calculations
# TODO - Update behavior to preferentially select arcs with opposing flows as those are cost saving (in the post-processing)
# TODO - Revise the post-processing to cancel opposing flows so that it handles parallel arcs
# TODO - Adapt to account for parallel arcs (i.e. more than one possible edge capacity) and test on parallel edges
# TODO - Implement a termination criteria based on convergence, not just number of episodes/generations
# TODO - Run the ants in parallel
# TODO - Construct feasibility proof of the solution returned by an ant
# TODO - Attempt to prove the convergence of the colony's solution in the limit
# TODO - Consider adding some annealing schedules to hyperparameters to reset the amount of exploration


ANT COLONY OPTIMIZATION EXPERIMENTS:
=====================================
# TODO - Clean up ant experiments to resemble the GA experiments
# TODO - Improve the hyperparameter tuning method and increase the search space
# TODO - Analyze time constraints


GA/ACO INTEGRATION:
=====================================
>> Use the ants to determine paths/trim input graph and then use the GA to refine, potentially as an iterative process until convergence.


OTHER FUTURE IDEAS:
=====================================
>> Use the dynamic nature of ACO for the optimal sink location within a feasible geologic region (i.e. polygon)
>> Use the dynamic nature of ACO for the sink capacity uncertainty
